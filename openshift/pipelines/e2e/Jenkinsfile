def name = 'helloworld'
def version = '1.0.0'
def deployNamespaces = ['dev', 'test', 'prod']

def buildTag

stage('Build Image') {
  openshift.withCluster() {
    echo "Starting build for ${name}"

    build = openshift.startBuild(name,
      '--wait=true').narrow('build').object()

    namespace = build.status.config.namespace
    name = build.status.config.name
    imageDigest = build.status.output.to.imageDigest
    buildNo = "${build.metadata.annotations.get('openshift.io/build.number')}"

    image = "${namespace}/${name}@${imageDigest}"

    echo "Completed building image: ${image}"

    buildTag = "${namespace}/${name}:v${version}b${buildNo}"

    echo "Tagging image: ${buildTag}"

    openshift.tag(image, buildTag)
  }
}

deployNamespaces.each { env ->
  stage("Approve Deployment - ${env}") {
    timeout(time:5, unit:'DAYS') {
      input message:"Approve deployment of ${buildTag} to ${env}?", ok: 'OK'
    }
  }

  stage("Deploy - ${env}") {
    environmentTag = "helloworld-${env}/${name}:latest"

    openshift.withCluster() {
      echo "Tagging ${buildTag} as ${environmentTag}"
      openshift.tag(buildTag, environmentTag)

      openshift.withProject("helloworld-${env}") {
        if(!openshift.selector('dc', "${name}").exists()) {
          echo "Creating deployment for ${name} in helloworld-${env}"
  
          openshift.newApp("${name}:latest")
          openshift.selector('svc', name).expose()
        }
      }
    }
  }
}
